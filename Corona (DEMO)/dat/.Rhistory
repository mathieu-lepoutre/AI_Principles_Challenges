require ( "data.table" )
require ( "magrittr" )
require ( "manipulate" )
setwd ( "C:/Users/David D'Haese/Documents/_TEACHING/AI_PRINCIPLES/COURSE/AI_Principles_Challenges/Corona/dat" )
dat <- fread ( "corona.tab" )
View(dat)
colnames(dat)
colnames(dat) %>% paste ( collapse = '", "' )
colnames(dat) %>% paste ( collapse = '", "' ) %>% cat
dat$V47 <- NULL
colnames(dat) <- c ("Country", "Province", "Lat", "Long",     "2020-01-22", "2020-01-23", "2020-01-24", "2020-01-25", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-29", "2020-01-30", "2020-01-31", "2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-12", "2020-02-13", "2020-02-14", "2020-02-15", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-19", "2020-02-20", "2020-02-21", "2020-02-22", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-26", "2020-02-27", "2020-02-28", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03" )
colnames(dat) <- c ("Country", "Province", "Lat", "Lon",     "2020-01-22", "2020-01-23", "2020-01-24", "2020-01-25", "2020-01-26", "2020-01-27", "2020-01-28", "2020-01-29", "2020-01-30", "2020-01-31", "2020-02-01", "2020-02-02", "2020-02-03", "2020-02-04", "2020-02-05", "2020-02-06", "2020-02-07", "2020-02-08", "2020-02-09", "2020-02-10", "2020-02-11", "2020-02-12", "2020-02-13", "2020-02-14", "2020-02-15", "2020-02-16", "2020-02-17", "2020-02-18", "2020-02-19", "2020-02-20", "2020-02-21", "2020-02-22", "2020-02-23", "2020-02-24", "2020-02-25", "2020-02-26", "2020-02-27", "2020-02-28", "2020-02-29", "2020-03-01", "2020-03-02", "2020-03-03" )
dat <- melt ( dat, id.vars = c ( "Country", "Province", "Lat", "Lon" ),
variable.name = "Date", value.name = "Count" )
View(dat)
install.packages("rworldmap")
require ( "rworldmap" )
dat_map <- joinCountryData2Map (
dat, joinCode = "NAME", nameJoinColumn = "Country")
dat_map <- joinCountryData2Map ( dat, joinCode = "NAME",nameJoinColumn = "Country", verbose = TUE)
dat %>% dim
dat_map <- joinCountryData2Map ( dat, joinCode = "NAME",
nameJoinColumn = "Country", verbose = TRUE)
dat [ Country == "Others", Province %>% unique ]
dat <- dat [Country != "Others" ]
dat [ Country == "Others", Province %>% unique ]
dat [ Country == "North Macedonia", Country := "Macedonia" ]
dat_map <- joinCountryData2Map ( dat, joinCode = "NAME",
nameJoinColumn = "Country", verbose = TRUE)
dat [ Country == "Mainland China", Country := "China" ]
dat_map <- joinCountryData2Map ( dat, joinCode = "NAME",
nameJoinColumn = "Country", verbose = TRUE)
dat_map %>% mapCountryData ( nameColumnToPlot = "Count" )
dat_map <- joinCountryData2Map ( dat [ Date == "2020-02-15" ], joinCode = "NAME",
nameJoinColumn = "Country" )
dat_map %>% mapCountryData ( nameColumnToPlot = "Count" )
dat
dat_map %>% mapCountryData ( nameColumnToPlot = "Count", catMethod = "pretty" )
dates
dates <- dat$Country %>% unique %>% sort
dates
dates <- dat$Date %>% unique %>% sort
dates
dates <- dat$Date %>% levels %>% sort
dates
do.call ( picker, args = as.list ( dates ))
manipulate({
dat_map <- joinCountryData2Map (
dat [ Date == date_cur ], joinCode = "NAME",
nameJoinColumn = "Country" )
dat_map %>%
mapCoudate_curntryData ( nameColumnToPlot = "Count", catMethod = "pretty" )
}, date_cur = do.call ( picker, args = as.list ( dates )))
manipulate({
dat_map <- joinCountryData2Map (
dat [ Date == date_cur ], joinCode = "NAME",
nameJoinColumn = "Country" )
dat_map %>%
mapCountryData ( nameColumnToPlot = "Count", catMethod = "pretty" )
}, date_cur = do.call ( picker, args = as.list ( dates )))
manipulate({
dat_map <- joinCountryData2Map (
dat [ Date == date_cur ], joinCode = "NAME",
nameJoinColumn = "Country" )
dat_map %>%
mapCountryData ( nameColumnToPlot = "Count", catMethod = "logFixedWidth" )
}, date_cur = do.call ( picker, args = as.list ( dates )))
dat_map %>%
mapCountryData ( nameColumnToPlot = "Count", catMethod = "logFixedWidth",
colourPalette = "negpos9" )
par(bg = 'blue')
manipulate({
dat_map <- joinCountryData2Map (
dat [ Date == date_cur ], joinCode = "NAME",
nameJoinColumn = "Country" )
dat_map %>%
mapCountryData ( nameColumnToPlot = "Count", catMethod = "logFixedWidth" )
}, date_cur = do.call ( picker, args = as.list ( dates )))
par ( bg = "darkgrey" )
manipulate({
dat_map <- joinCountryData2Map (
dat [ Date == date_cur ], joinCode = "NAME",
nameJoinColumn = "Country" )
dat_map %>%
mapCountryData ( nameColumnToPlot = "Count", catMethod = "logFixedWidth" )
}, date_cur = do.call ( picker, args = as.list ( dates )))
dat$Country %>% levels
dat$Country %>% unique
cnt_cur == "Belgium"
cnt_cur = "Belgium"
dat_cnt_cur <- dat [ Country = cnt_cur, .( Count = sum ( Count )), Date ]
dat_cnt_cur <- dat [ Country == cnt_cur, .( Count = sum ( Count )), Date ]
dat_cnt_cur
dat_cnt_cur [, plot ( Count ~ Date)]
manipulate({
dat_cnt_cur <- dat [ Country == cnt_cur, .( Count = sum ( Count )), Date ]
dat_cnt_cur [, plot ( Count ~ Date, main = cnt_cur )]
}, cnt_cur = do.call ( picker, args = as.list ( countries )))
countries <- dat$Country %>% unique %>% sort
manipulate({
dat_cnt_cur <- dat [ Country == cnt_cur, .( Count = sum ( Count )), Date ]
dat_cnt_cur [, plot ( Count ~ Date, main = cnt_cur )]
}, cnt_cur = do.call ( picker, args = as.list ( countries )))
dat_cnt_cur [, plot ( Count ~ Date, main = cnt_cur )]
cnt_cur=Ïran
cnt_cur="Iran"
dat_cnt_cur [, plot ( Count ~ Date, main = cnt_cur )]
dat_cnt_cur <- dat [ Country == cnt_cur, .( Count = sum ( Count )), Date ]
dat_cnt_cur [, plot ( Count ~ Date, main = cnt_cur )]
# D = Delay, S = Saturation level, H = Half-Max Date, C = Hill coefficient ~
#  Steepness at H
formula <- Count ~ D + A * ( Date^C / ( H^C + Date^C ))
model
nls
model  <- nls ( formula )
model  <- dat_cnt_cur [, nls ( formula )]
dat_cnt_cur
model  <- dat_cnt_cur [, nls ( formula )]
model  <- nls ( formula, data = dat_cnt_cur )
# D = Delay, S = Saturation level, H = Half-Max Date, C = Hill coefficient ~
#  Steepness at H
dat_cnt_cur [, Date := as.Date ( Date )]
dat_cnt_cur
dat_cnt_cur <- dat [ Country == cnt_cur, .( Count = sum ( Count )), Date ]
# D = Delay, S = Saturation level, H = Half-Max Date, C = Hill coefficient ~
#  Steepness at H
dat_cnt_cur [, Date := as.Date ( Date ) - as.Date ( "2020-01-22" )]
dat_cnt_cur
dat_cnt_cur <- dat [ Country == cnt_cur, .( Count = sum ( Count )), Date ]
# D = Delay, S = Saturation level, H = Half-Max Date, C = Hill coefficient ~
#  Steepness at H
dat_cnt_cur [, Date := as.Date ( Date )]
formula <- Count ~ D + A * ( Date C / ( H^C + Date^C ))
dat_cnt_cur
formula <- Count ~ D + A * ( Date C / ( H^C + Date^C ))
formula <- Count ~ D + A * ( Date C / ( H^C + Date^C ))
model  <- nls ( Count ~ D + A * ( Date C / ( H^C + Date^C )),
data = dat_cnt_cur )
model  <- nls ( Count ~ D + A * ( Date C / ( H^C + Date^C )),
data = dat_cnt_cur )
model <- nls ( Count ~ D + A * ( Date C / ( H^C + Date^C )),
data = dat_cnt_cur )
nls ( Count ~ D + A * ( Date C / ( H^C + Date^C )),
data = dat_cnt_cur )
model <- nls ( Count ~ D + A * ( Date C / ( H^C + Date^C )), \
data = dat_cnt_cur )
model <- nls ( Count ~ D + A * ( Date C / ( H^C + Date^C )), data = dat_cnt_cur )
model <- nls ( Count ~ D + A * ( Date^C / ( H^C + Date^C )), data = dat_cnt_cur )
# D = Delay, S = Saturation level, H = Half-Max Date, C = Hill coefficient ~
#  Steepness at H
dat_cnt_cur [, Date := as.numeric ( as.Date ( Date ))]
model <- nls ( Count ~ D + A * ( Date^C / ( H^C + Date^C )), data = dat_cnt_cur )
dat_cnt_cur
model <- nls ( Count ~ D + A * ( Date^C / ( H^C + Date^C )), data = dat_cnt_cur )
C
Cf
model <- nls ( Count ~ D + A * ( Date^Cf / ( H^Cf + Date^Cf )), data = dat_cnt_cur )
formula <- Count ~ D + A * ( Date^Cf / ( H^Cf + Date^Cf ))
formula <- Count ~ D + A * ( Date^Cf / ( H^Cf + Date^Cf ))
model <- nls ( formula, data = dat_cnt_cur )
D
S
M
formula <- Count ~ S + M * ( Date^Cf / ( H^Cf + Date^Cf ))
model <- nls ( formula, data = dat_cnt_cur )
S = as.numeric ( as.Date ( "2020-02-10" ))
S
S<-NULL
model <- nls ( formula, data = dat_cnt_cur,
start = c ( S = as.numeric ( as.Date ( "2020-02-10" )),
M = 1000,
H = as.numeric ( as.Date ( "2020-03-01" )),
Cf = 2 ))
model <- nls ( formula, data = dat_cnt_cur,
start = c ( S = as.numeric ( as.Date ( "2020-02-10" )),
M = 2000,
H = as.numeric ( as.Date ( "2020-03-01" )),
Cf = 2 ))
model <- nls ( formula, data = dat_cnt_cur,
start = c ( S = as.numeric ( as.Date ( "2020-02-10" )),
M = 2000,
H = 30,
Cf = 2 ))
as.numeric ( as.Date ( dat_cnt_cur$Date ))
dat_cnt_cur
model <- nls ( formula, data = dat_cnt_cur,
start = c ( S = as.numeric ( as.Date ( "2020-02-10" )),
M = 2000,
H = 10,
Cf = 3 ))
